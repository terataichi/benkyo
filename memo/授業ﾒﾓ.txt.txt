デザインパターン

シングルトン：メモリ上に1つしか存在できない

大きく分けると静的と動的がある

動的:使うタイミング、使おうとしたときにはじめてメモリに存在する

静的:最初から
private にコンストラクタを置いて


staticの関数の中で使えるのはstaticの変数、関数だけ

スマートポインタ :プログラム上勝手にdeleteしてくれる３つの要素全部。
		　スマートにポインターを管理してくれる
		　実態を持っているからどっとを打ったらスマートポインターのメンバーを呼んでくれる
		　newしたものを管理する？

		　getはアドレスを返してくれるがせっかく管理してもらってるのになんで中身いじるん？なめとるん？
		 
		  (*)をつけることによってｽﾏｰﾄﾎﾟｲﾝﾀの管理している中身見れる、
	　	　->で直接見てもいいがどうでき確保したやつを見分けるがむずくなる


ユニークポインター：所有権を持ったポインター、誰も使わなくなったら消える
		　：所有権は一人しか持てないその人が所有権を放棄したら消える。
		  :ユニークポインターに対して*をつける事によって




*をつけることで実態を持つ

->はその変数のアドレスの中身

moveセマンティクス　授与権利を与えることができる、今回はシーンを切り替えるときに授与して更新した。
前入っていたものはゆーにーくポイントで勝手に消えてくれる

スタンダートテンプレートライブラリ stl

reserve:予約：先に少し多めにメモリを取っておく事によってメモリの再配置などを避ける

範囲for文：開始始点と終点がはっきりわかっていれば勝手に回してくれる

ﾃﾞﾌｫﾙﾄﾃﾞﾘｰﾀ：じぶんのくらすのですとらくとのこと

関数ｵﾌﾞｼﾞｪｸﾄ：今回はｶｽﾀﾑﾃﾞﾘｰﾀｰを作った
	　　：基本的にはメンバーはパブリックでほしいからstractでかく
ｶｽﾀﾑﾃﾞﾘｰﾀｰ：自分で作ったでりーた
